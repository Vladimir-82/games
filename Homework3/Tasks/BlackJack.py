'''
Ваша задача написать программу, играющую с пользователем в блэкджек - 21.

В данной игре в качестве диллера будет выступать ваша программа.

Значения очков каждой карты: от двойки до десятки — от 2 до 10 соответственно, у туза — 1 или 11 (11 пока общая сумма не
больше 21, далее 1), у т. н. картинок (король, дама, валет) — 10.

Если у игрока и дилера число очков на руках равное, то такая ситуация называется «ровно» (англ. push). В такой ситуации
все остаются при своих ставках, никто не выигрывает и не проигрывает.

Компьютер раздаёт карты: по две карты каждому игроку, себе раздаёт одну карту. Все карты открываются сразу и видны игроку.

Если у игрока сразу после раздачи набралось 21 очко (то есть у игрока туз и десятиочковая карта), то такая ситуация и
называется блек-джек. В таком случае игроку сразу выплачивается выигрыш 3 к 2 (то есть в 1,5 раза превышающий его ставку).

Далее игрокам, у которых не блек-джек, предлагается на выбор либо взять ещё карту (в таком случае игрок должен сказать
дилеру «карту» или «ещё», англ. hit me), либо остаться при тех картах (и той сумме очков), которые у него на руке
(в этом случае игрок должен сказать дилеру «достаточно» или «хватит», англ. enough).

Если у игрока после взятия новой карты в сумме получается 21, компьютер не спрашивает его больше.

Если у игрока после взятия новой карты сумма очков превысит 21, то такая ситуация называется «перебор». Программа выводит
«много» и снимает ставку игрока в пользу казино.

Если у компьютера в первых двух картах набирается 21 очко (блек-джек), то все игроки (кроме тех, у кого тоже блек-джек),
проигрывают. Те, у которых блек-джек, остаются при своих ставках.

Примеры
Ввелите ставку: 100
Начинаю раздачу:
Ваши карты
5♠, J♣
Карты диллера
Q♥

Ваши действия?
>>> hit me
Вы получили карту K♥
Перебор
Игра окончена
Бонусные очки
Запоминать количество денег (очков) пользователя - со старта 1000. При перезапуске программы она вспоминает сколько осталось у игрока в прошлой сессии
'''

class MyClass():

    def myfunc(self):
        '''
        Here we write all the logic and return result

        :return:
        '''
        result = None

        return result # here we retrun result

if __name__ == '__main__':
   # Here we can make console input and check how function works

   # var = input('Input VAR: ')

   result = MyClass().myfunc()

   print(result)
